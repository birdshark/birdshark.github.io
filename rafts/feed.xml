<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>In the Sky</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://birdshark.github.io/</link>
    <atom:link href="http://birdshark.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 28 Jul 2016 11:25:28 +0800</pubDate>
    <lastBuildDate>Thu, 28 Jul 2016 11:25:28 +0800</lastBuildDate>
    <generator>Jekyll v3.0.3</generator>
    
      <item>
        <title>mysql-tips</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;第三方登录库FACEBOOK接入问题,各种问题让人摸不到门&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GFW不允许通过，设置CURL代理&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;curl_setopt($ch,CURLOPT_PROXY,’127.0.0.1’);&lt;br /&gt;
curl_setopt($ch,CURLOPT_PROXYPORT,’8787’);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;入职一个月，学到什么了呢
1. 怎么接入paypal-php-sdk
2. 怎么申请paypal开发者账号，还有测试账号。
3. 怎么申请google,facebook,twitter的第三方登录
4. 怎么灵活运用TP3.2的国际化功能，来达到各个版本之间的灵活切换，而不影响功能
5. swiper框架的使用，wechat-jssdk的使用&lt;/p&gt;

&lt;p&gt;下面是个人的一些想法，工作周例会时，头儿老是强调去研究api，然后自己编码，我觉得这个不是很必要。尽管这样会弱化(?)你的编码能力。
但是在我看来，这之中未必没有让你觉得受益的地方。
1. 让别人写的更融洽的结合到现有的环境，这需要一定的功力
2. 使用的过程中会接触的别人的代码，scan code，可以了解他人的设计思路，学习他人的编码技巧。
3. github上那么多的库，建库的目的是什么，就是为了便捷开发，节约成本，特别是对于一些国外的产品，同时你的英文水平有不甚高。这个时候当如何。找找歪国人写的api总是没错的，为什么，对api的理解很容易。这样可以减少出错的概率。&lt;/p&gt;

</description>
        <pubDate>Wed, 11 May 2016 17:21:00 +0800</pubDate>
        <link>http://birdshark.github.io/skill/2016/05/11/php-oauth-tips.html</link>
        <guid isPermaLink="true">http://birdshark.github.io/skill/2016/05/11/php-oauth-tips.html</guid>
        
        <category>php</category>
        
        
        <category>skill</category>
        
      </item>
    
      <item>
        <title>mysql-tips</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;有些时候，你在操作MYSQL数据库当口遇到了些问题，那么记录下来以作后师&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;外键关联表数据删除限制
&lt;code class=&quot;highlighter-rouge&quot;&gt;SET FOREIGN_KEY_CHECKS = 0;&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;TRUNCATE TABLE table_name;&lt;/code&gt;
当然操作完成后还是得将设置还原
&lt;code class=&quot;highlighter-rouge&quot;&gt;SET FOREIGN_KEY_CHECKS = 1;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;mysql多主模式情况下,当有一台主机down机,重启后可能会发生主键冲突，若是以自增长做主键，
可以考虑设定规则，使得各主机之间的生产主键的规律各不相同
若是对主键没有太多要求可以使用unique函数生成id&lt;/p&gt;
</description>
        <pubDate>Wed, 11 May 2016 17:21:00 +0800</pubDate>
        <link>http://birdshark.github.io/skill/2016/05/11/mysql-tips.html</link>
        <guid isPermaLink="true">http://birdshark.github.io/skill/2016/05/11/mysql-tips.html</guid>
        
        <category>mysql</category>
        
        
        <category>skill</category>
        
      </item>
    
      <item>
        <title>杂项</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;做这篇小记缘何，是时项目由Laravel5.0至Laravel5.1跨度很大，主要体现在class的引用方式,下面是一种解决方法，但是实用性不是很大
值得一提的是这个&lt;code class=&quot;highlighter-rouge&quot;&gt;trait&lt;/code&gt;使用技巧&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;step-1-create-a-trait-called-as-you-desire-in-example&quot;&gt;Step 1. Create a trait called as you desire, in example:&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;namespace YourProjectNamespace;
trait ClassEmulationTrait {
    static function class(){
            return __CLASS__;
    }
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;step-2-use-this-trait-within-each-class-you-need-to-emulate-the-class-method&quot;&gt;Step 2. Use this trait within each class you need to emulate the ::class method.&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;namespace YourProjectNamespace;
class UserRepository{
    use ClassEmulationTrait;
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;step-3-later-in-your-code-you-could-use&quot;&gt;Step 3. Later in your code you could use:&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; echo YourProjectNamespace\UserRepository::class();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 16 Mar 2016 19:13:00 +0800</pubDate>
        <link>http://birdshark.github.io/skill/2016/03/16/mass.html</link>
        <guid isPermaLink="true">http://birdshark.github.io/skill/2016/03/16/mass.html</guid>
        
        <category>mass</category>
        
        
        <category>skill</category>
        
      </item>
    
      <item>
        <title>SimpleSAMLphp实现单点登录</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;前段日子，某去投机，结果遇到被问到SSO，就这几年的工作经验实在是没有应用过这种玩意，正好近来闲得发慌，找了些资料研究了一番&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;简介&lt;/h3&gt;
&lt;p&gt;SAML Security Assertion Markup Language
安全领域中用来交换认证和授权数据的标准，它是一种基于XML的协议，
在验证器，消费者，和服务器之间使用安全令牌包含断言来传递主要信息。
SAML2.0支持基于web的认证和授权，包括跨域单点登录，有助于减少向用户分发多个身份验证令牌的管理开销&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;section-1&quot;&gt;工作流程&lt;/h3&gt;

&lt;p&gt;见下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/saml.jpg&quot; alt=&quot;saml&quot; title=&quot;xxxxxx&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;simplesamlphp&quot;&gt;SimpleSAMLphp&lt;/h3&gt;
&lt;p&gt;这是GOOGLE找出来的一款基于PHP的SAML认证系统，某研究了将近一个星期，把基本的配置和流程摸得差不多了&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config.php&lt;/code&gt;配置修改&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&#39;auth.adminpassword&#39;=&amp;gt;&#39;xxxxxxxx&#39;,//随机,只要不跟以前一样
//Win上装了MINGW运行下面命令可生成33位随机字符串用作辅助加密
//tr -c -d &#39;0123456789abcdefghijklmnopqrstuvwxyz&#39; &amp;lt;/dev/urandom | dd bs=32 count=1 2&amp;gt;/dev/null;
&#39;secretsalt&#39; =&amp;gt; &#39;1igh1ed3xtv5x2d4pkke0ojpl6naahth&#39;,
//配上本机mysql
&#39;database.dsn&#39; =&amp;gt; &#39;mysql:host=localhost;dbname=saml&#39;,
&#39;database.username&#39; =&amp;gt; &#39;root&#39;,
&#39;database.password&#39; =&amp;gt; &#39;&#39;,
//打开saml2验证器
&#39;enable.saml20-idp&#39; =&amp;gt; true,
//以下3个模块，需要设置成可以访问
&#39;module.enable&#39; =&amp;gt; array(
    // Setting to TRUE enables.
    &#39;exampleauth&#39; =&amp;gt; TRUE,
    // Setting to FALSE disables.
    &#39;saml&#39; =&amp;gt; TRUE,
    // Unset or NULL uses default.
    &#39;core&#39; =&amp;gt; TRUE,
),
//设置Session的域名
&#39;session.cookie.domain&#39; =&amp;gt; &#39;.xxxx.com&#39;,
//验证器流程控制
&#39;authproc.sp&#39; =&amp;gt; array(
	//服务器发送元数据使用的属性图，对应attributemap目录下面的文件
	10 =&amp;gt; array(
         &#39;class&#39; =&amp;gt; &#39;core:AttributeMap&#39;, &#39;addurnprefix&#39;
     ),
	//允许自动生成TargetID
	20 =&amp;gt; &#39;core:TargetedID&#39;,
	//语言适配
	30 =&amp;gt; &#39;core:LanguageAdaptor&#39;,
	//添加界定属性
	40 =&amp;gt; &#39;core:AttributeRealm&#39;,
	45 =&amp;gt; array(
        &#39;class&#39;         =&amp;gt; &#39;core:StatisticsWithAttribute&#39;,
        &#39;attributename&#39; =&amp;gt; &#39;realm&#39;,
        &#39;type&#39;          =&amp;gt; &#39;saml20-idp-SSO&#39;,
    ),
	//属性校验
	50 =&amp;gt; &#39;core:AttributeLimit&#39;,
	//属性修改
	60 =&amp;gt; array(
        &#39;class&#39; =&amp;gt; &#39;core:AttributeAlter&#39;,
        &#39;pattern&#39; =&amp;gt; &#39;/OU=studerende/&#39;,
        &#39;replacement&#39; =&amp;gt; &#39;Student&#39;,
        &#39;subject&#39; =&amp;gt; &#39;distinguishedName&#39;,
        &#39;%replace&#39;,
    ),
	//认证确认
	90 =&amp;gt; array(
        &#39;class&#39; =&amp;gt; &#39;consent:Consent&#39;,
        &#39;store&#39; =&amp;gt; &#39;consent:Cookie&#39;,
        &#39;focus&#39; =&amp;gt; &#39;yes&#39;,
        &#39;checked&#39; =&amp;gt; TRUE
    ),
	//语言输配
	99 =&amp;gt; &#39;core:LanguageAdaptor&#39;,
),
//服务器流程控制
&#39;authproc.sp&#39; =&amp;gt; array(
	//同上
	10 =&amp;gt; array(
        &#39;class&#39; =&amp;gt; &#39;core:AttributeMap&#39;, &#39;removeurnprefix&#39;
    ),
	//
	60 =&amp;gt; array(
        &#39;class&#39; =&amp;gt; &#39;core:GenerateGroups&#39;, &#39;eduPersonAffiliation&#39;
    ),
	//添加属性
    61 =&amp;gt; array(
        &#39;class&#39; =&amp;gt; &#39;core:AttributeAdd&#39;, &#39;groups&#39; =&amp;gt; array(&#39;users&#39;, &#39;members&#39;)
    ),
	//同上
	90 =&amp;gt; &#39;core:LanguageAdaptor&#39;,
),
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以上对&lt;code class=&quot;highlighter-rouge&quot;&gt;config.php&lt;/code&gt;里的比较关键的参数做了个说明，配置好这些后接下来就要配置&lt;code class=&quot;highlighter-rouge&quot;&gt;authsources.php&lt;/code&gt;
	//服务器配置
	‘default-sp’=&amp;gt;array(
		//指定认证源
		‘saml:SP’,
		//服务器元数据
		‘entityID’ =&amp;gt; ‘http://sp.saml2.com/module.php/saml/sp/metadata.php/sp’,
		//验证器元数据
		‘idp’ =&amp;gt; ‘http://idp.saml.com/saml2/idp/metadata.php’,
		//
		‘discoURL’ =&amp;gt; null,
	),
	//验证源
	‘example-sql’ =&amp;gt; array(
        ‘sqlauth:SQL’,
        ‘dsn’ =&amp;gt; ‘mysql:host=127.0.0.1;port=3306;dbname=saml’,
        ‘username’ =&amp;gt; ‘root’,
        ‘password’ =&amp;gt; ‘’,
        ‘query’ =&amp;gt; ‘SELECT uid, givenName, email, eduPersonPrincipalName FROM users WHERE uid = :username AND password = SHA2(CONCAT((SELECT salt FROM users WHERE uid = :username), :password),256);’,
    ),&lt;/p&gt;

&lt;p&gt;当然你可以使用静态的验证源&lt;code class=&quot;highlighter-rouge&quot;&gt;example-static&lt;/code&gt;，我这是为了跟数据库结合起来使用,建表脚本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `uid` varchar(64) NOT NULL,
  `givenName` varchar(64) NOT NULL,
  `email` varchar(128) NOT NULL,
  `eduPersonPrincipalName` varchar(128) NOT NULL,
  `salt` varchar(33) NOT NULL,
  `password` varchar(512) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8; 要是不知道密码填什么，就运行下
SELECT SHA2(CONCAT((SELECT `盐` FROM users WHERE uid = `&#39;用户名&#39;`), `&#39;明文密码&#39;`),256); salt自己定，随便点也可以，这个主要用来测试
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;再来就是配置metadata了,因为我们用的是SAML2做数据交换验证
主要涉及的文件有以下三个&lt;code class=&quot;highlighter-rouge&quot;&gt;saml20-sp-remote.php&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;saml20-idp-remote.php&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;saml20-idp-hosted.php&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 16 Mar 2016 19:13:00 +0800</pubDate>
        <link>http://birdshark.github.io/skill/2016/03/16/php-saml2.html</link>
        <guid isPermaLink="true">http://birdshark.github.io/skill/2016/03/16/php-saml2.html</guid>
        
        <category>sso</category>
        
        <category>php</category>
        
        
        <category>skill</category>
        
      </item>
    
      <item>
        <title>interview</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;DML:Data manipulation language&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;mysql57&quot;&gt;1. mysql(5.7)&lt;/h3&gt;

&lt;h4 id=&quot;a-&quot;&gt;A. 存储引擎以及特性&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MyISAM&lt;/code&gt; :  5.5版本之前作为默认存储引擎。单纯读写性能很强，不支持事物，锁粒度为表级别，只支持 B-tree index，读写操作具有串行特性。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;特点
1. 数据值优先以低字节形式存储，这使得数据库和操作系统相互独立。
2. 所有的数字键的值存储在高字节允许更好的索引压缩。
3. 单表最多允许2^32行数据
4. 每张MyISAM表的最大索引数为64个,单列最大索引数为16
5. 混合写入操作(增删改)对变长列所产生的碎片的影响非常小，这是因为它会自动合并被删除的或被扩展的数据块
6. 可以将数据文件和索引文件放在不同的物理设备上以提升其速度
7. BLOB和TEXT列可以被索引
8. NULL值现在可以现在可以存放在索引列了，但是会占0到1个字节
9. 每列可以定义自己的字符集
10. 在索引文件里有个标记表示此表是否正常关闭，mysqld启动命令 `--myisam-recover-options`如果在MyISAM数据表被不正确的关闭，此选项可以在启动数据库时对MyISAM表进行自动检查修复，
11. myisamchk 命令用法: `--update-state` 把无问题的myisam数据表标记为已检查 `--fast` 只会检查没有被标记的myisam数据表
12. 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Innodb&lt;/code&gt; :  5.5版本开始作为默认存储引擎。支持事物,单纯读写能力较MyISAM弱,锁粒度为行级锁，ACID标准，支持外键。&lt;/p&gt;

&lt;p&gt;科普&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A:atomicity 原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。
事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。
C:consistency 一致性：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，
这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。
I:isolation 隔离性：当两个或者多个事务并发访问（此处访问指查询和修改的操作）数据库的同一数据时所表现出的相互关系。
事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）
D:durability 持久性：在事务完成以后，该事务对数据库所作的更改便持久地保存在数据库之中，并且是完全的。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;特点&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 数据操作遵循ACID模式，使事物具有提交，回滚，闪回的特点，这样更好的保证数据安全
2. 行级锁和oracle形式的一致性读，增加了并发性能
3. 基于主键的查询优化,整理你的数据
4. 保证数据的一致性，该引擎支持外键约束，有了外键约束，就可以避免增删改操作而导致的数据不一致
5. 你可以在同一个数据库中自由的混合使用存储引擎
6. 当处理大量数据时会让CPU发挥最大性能 Innodb在内存中拥有自己的独有的缓冲池来缓存数据和索引，innodb_file_per_table默认值是enabled。这意味着每张新的Innodb数据表和他的联合索引被存储在单独的文件。 当innodb_file_per_table设置成disabled innodb会把表和索引存放在一个由几个文件组成的()单独的系统表空间，5.7.6，数据和索引也可被存储在一般表空间，也就是可以存储多个数据表的共享表空间。 innodb可以处理大量的数据即使在数据文件限制在2GB的操作系统
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;新特性:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.安全性提升 - 
    A更换了密码加密机制 
    B增加了过期密码 
    C增加了用户锁定 
    D启动时自动生成SSL and RSA 证书
    Emysqld --initialize作为mysql安装部署命令
2.SQL模式改变
3.在线修改表结构
4.支持中文，日文和韩文的全文索引插件
5.Innodb存储引擎优化
    A在线修改可变长字符串的长度 `ALTER TABLE table_name ALGORITHM = [COPY|INPLACE|DEFAULT] ,CHANGE COLUMN old_column new_column VARCHAR(int);`
    注意: new_column 可以与 old_column 相同 当int 大于当前设置数值  用INPLACE 否则用COPY 
    B优化 `CREATE TABLE`, `DROP TABLE`, `TRUNCATE TABLE`, and `ALTER TABLE` 语句,来提升Innodb的临时表性能
    C临时表数据元不再存储在系统表里面，而是存储于INNODB_TEMP_TABLE_INFO该表存在数据库information_schema,为用户提供了活动的临时表快照，
    此表包含的所有用户和系统创建的临时表的数据元和报表是活跃在一个给定的Innodb实例，这些表是在第一次运行Select语句是被创建
    DInnodb现在支持mysql内建的空间数据类型，此前发布的mysql版本中空间数据会被存储为二进制块类型。BLOB仍然作为底层的数据类型，
    但是空间数据类型已经被划分到Innodb的新内置的数据类型 `DATA_GEOMETRY`
    E无压缩的Innodb临时表现在可以存放在一个单独表空间，这个表空间会在服务启动时重建。默认是存放在DATADIR，你可以通过新加的配置项`innodb_temp_data_file_path`,
    来指定临时表空间的数据路径
    F innochecksum新加了操作项，功能更强大
        工具介绍：此工具是用来验证Innodb文件的校验和，他可以读取Innodb表空间
        计算每页的校验和跟存好的校验和作比较，并报告损坏页的错配信息。它原先是设计用来加速检查断电时
        表空间文件的完整性的，现在也可以用于文件复制。因为检测到不匹配的话会引起Innodb服务
        关闭。你可以自由控制使用这个命令，而不用等待在服务器在使用过程中遇到坏的页面。此命令支持检查大于2GB的文件，以前版本的innochecksum最大只支持2GB
        他不可用在表空间已经被打开的服务上。对于此类文件，你应该用CHECK_TABLE来检查表。如果你用innochecksum来检查已经被打开的表空间，服务器会返回&#39;Unable to lock file&#39;的错误信息
        如果校验和不匹配被检测到了，你最好对表空间做个备份，或者尝试启动服务使用mysqldump来给表和表空间做个备份
    G为正常临时表和压缩临时表以及位于表空间的相关对象新增了非重做撤销日志。创建临时表 create temporary table table_name ( name datatype(length) null | not null);
    
    关于非重做撤销日志现在现在被用于多版本控制
        
        
    H
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;b-&quot;&gt;B. 锁类型及其影响&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Table-level locking&lt;/code&gt;: 表级锁 : 开销小，加锁快。不会出现死锁，锁定粒度大，并发度最低，发生锁冲突的概率最高(跟锁粒度成正比)。应用于&lt;code class=&quot;highlighter-rouge&quot;&gt;MYISAM&lt;/code&gt;存储引擎&lt;br /&gt;
model-1 Shared locks 表共享锁&lt;br /&gt;
model-2 Exclusive locks 表独占锁&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;读锁&lt;/code&gt;: 发生在读取时，锁模式为共享锁，读的时候允许其他用户读,但是不允许任何用户写 &lt;code class=&quot;highlighter-rouge&quot;&gt;lock table table_name read [local]&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;写锁&lt;/code&gt;: 发生在写入时，锁模式为独占锁，写的时候，允许当前用户读写，但是不允许其他用户读和写  &lt;code class=&quot;highlighter-rouge&quot;&gt;lock table table_name write [local]&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;READ LOCAL和READ之间的区别是，READ LOCAL允许在锁定被保持时，执行非冲突性INSERT语句（同时插入）。
但是，如果您正打算在MySQL外面操作数据库文件，同时您保持锁定，则不能使用READ LOCAL&lt;/code&gt; &lt;br /&gt;
MYISAM引擎读写有串行性，但是在一定的条件下，也支持读写并行&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;show global variables like &#39;concurrent%&#39;&lt;/code&gt;查看当前读写并行支持
参数:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0(never) : 不支持读写并行
1(auto default) : 支持读写并行，前提是表无空洞(即是数据都是连续的中间没有被删除的数据),如果有被删除的行，则需要等到读锁释放，写锁载入才能进行插入
2(always):不管表中又没有空洞，总是支持在表尾并行插入  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;调度：&lt;br /&gt;
两个进程分别请求读写，MySQL优先调度写，不仅如此，即使读请求先到锁等待队列，写请求后到，写锁也会插到读锁请求之前！
这就是为什么Mysql不太适合有大量更新操作和查询操作，因为大量更新会使查询操作很难获得锁，因而发生阻塞。这是比较致命的。我们可以通过一些设置来调度读写优先权&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.通过启动参数low-priority-updates,使MyISAM引擎给读操作以优先权
2.通过执行命令SET LOW_PRIORITY_UPDATES = 1,使该连接发出的更新请求优先级降低
3.通过指定INSERT UPDATE DELETE 语句的LOW_PRIORITY_UPDATES属性,降低该语句的优先级
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以上3种方法都是降低写操作的优先级，来给读操作更多的取锁机会。还有一点,通过限制&lt;code class=&quot;highlighter-rouge&quot;&gt;max_lock_write_count&lt;/code&gt;值来调度写操作的优先级。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：尽量避免出现长时间运行的查询操作，不要总想用一条SELECT语句来解决问题，因为这种看似巧妙的SQL语句，往往比较复杂，执行时间较长，在可能的情况下可以通过使用中间表等措施对SQL语句做一定的“分解”，使每一步查询都能在较短时间完成，从而减少锁冲突。如果复杂查询不可避免，应尽量安排在数据库空闲时段执行，比如一些定期统计可以安排在夜间执行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Row-level locking&lt;/code&gt;: 行级锁 : 开销大,加锁慢。会出现死锁，锁定粒度小，并发最高，发生锁冲突的概率最低。应用于&lt;code class=&quot;highlighter-rouge&quot;&gt;Innodb&lt;/code&gt;存储引擎&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;`共享锁`:  select * from table_name where ..... lock in share mode;
`排他锁`:  select * from table_name where ..... for update;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;共享锁案例参见&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/innodb-lock-modes.html&quot;&gt;http://dev.mysql.com/doc/refman/5.7/en/innodb-lock-modes.html&lt;/a&gt;
给行加上共享锁后其他用户也可获取改行的共享锁,没有读取限制，当两个用户同时对同一行申请共享锁，先进行的写操作会阻塞，
后进行的写操作会抛出死锁错误，此用户申请的共享锁解除，另一个用户获得写锁，继而更新数据&lt;/p&gt;

&lt;p&gt;排它锁
当关闭自动提交时 即当前session执行&lt;code class=&quot;highlighter-rouge&quot;&gt;set autocommit = 0&lt;/code&gt;
当前session申请排它锁后，其他用户要想申请排它锁则需要等待获得锁，当等待时间超时会中断事物
当前session执行更新操作并且commit后，当前排它锁会释放，其他用户可以申请获得锁&lt;/p&gt;

&lt;p&gt;Innodb行锁实现方式
Innodb的行锁是通过给索引上的索引项加锁实现，这一点Mysql和Oracle不同。后者是通过在数据块中对应行数据加锁实现的
Innodb的行锁实现特点意味着，只有通过索引条件检索数据，Innodb才使用行锁，否则只用表级锁&lt;/p&gt;

&lt;p&gt;由于MySQL的行锁是针对索引加的锁，不是针对记录加的锁，所以虽然是访问不同行的记录，但是如果是使用相同的索引键，是会出现锁冲突的。
例如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select * from dcba where test = 1007 and test2 = &#39;jajajaja&#39; for update;
select * from dcba where test = 1005 and test2 = &#39;jajajaja&#39; for update;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这两个排它锁之间会产生锁等待。因为&lt;br /&gt;
虽然查询条件不一样，但是由于查询条件中test是主键索引，而test2没有索引，总的来说索引项是相同的实际上就是相当于&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select * from dcba where test = 1007 for update;
select * from dcba where test = 1005 for update;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当表有多个索引项时，我们可以组合索引项来达到事物隔离，不论是主键索引，唯一索引，还是普通索引，Innodb都是以行锁来对数据加锁
特殊情况下，即使在表中添加了索引字段，但是否使用索引来检索数据还是由mysql通过判断不同执行计划的代价来决定的。如果mysql认为全表扫描效率更高。比如数据量很小的。
那么它就不会使用索引，这种情况下使用的是表锁，而不是行锁，因此分析锁冲突时，要分析sql的执行计划，explain select 语句来确认是否是用了索引&lt;/p&gt;

&lt;p&gt;间隙锁&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；
对于键值在条件范围内但并不存在的记录，叫做“间隙（GAP)”，InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁（Next-Key锁）。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;作用:一方面可以防止幻读。另一方面，用作复制和恢复&lt;/p&gt;

&lt;p&gt;参考手册上讲:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;InnoDB使用行锁定，BDB使用页锁定。对于这两种存储引擎，都可能存在死锁。这是因为，在SQL语句处理期间，InnoDB自动获得行锁定和BDB获得页锁定，而不是在事务启动时获得。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Page-level locking&lt;/code&gt;: 页级锁：各项性能介于表级锁和行级锁之间&lt;/p&gt;

&lt;h4 id=&quot;c-&quot;&gt;C. 事物隔离级别及其特点&lt;/h4&gt;

&lt;p&gt;Serialize 序列化 隔离级别最高，串行性是事务中所请求的读写锁在事物结束时被释放。对并发影响大。
Repeatable Read 重复读  大多数是应为新增数据而造成的结果。为什么不可重复，因为数据已经被其他事务做了修改(写入)
Read Committed 读提交(授权读) 不会发生脏读，因为在请求数据之前，所有事物均被提交，但是可能会发生幻读和不重复读
Read UnCommitted 读不提交(未授权读) 这种隔离级别，幻读，脏读，不可重复读&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;幻读&lt;/code&gt;:两次相同的查询操作，返回的结果不一样，出现的原因是没有对条件加上范围锁&lt;/p&gt;

&lt;p&gt;例子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* Query 1 */
SELECT * FROM users WHERE age BETWEEN 10 AND 30;
/* Query 2 */
INSERT INTO users(id,name,age) VALUES ( 3, &#39;Bob&#39;, 27 );
COMMIT;
/* Query 1 */
SELECT * FROM users WHERE age BETWEEN 10 AND 30; 
COMMIT;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;脏读&lt;/code&gt;:脏读就是事务性读取一行已经被修改但是尚未被提交的数据&lt;br /&gt;
例子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* Query 1 */
SELECT age FROM users WHERE id = 1;
/* will read 20 */

/* Query 2 */
UPDATE users SET age = 21 WHERE id = 1;
/* No commit here */

/* Query 1 */
SELECT age FROM users WHERE id = 1;
/* will read 21 */

/* Query 2 */
ROLLBACK; 
/* lock-based DIRTY READ */
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;不可重复读&lt;/code&gt;: 不可重复读发生在事物期间，相同的查询执行两次但是返回的结果不一样&lt;br /&gt;
例子:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* Query 1 */
SELECT * FROM users WHERE id = 1;
/* Query 2 */
UPDATE users SET age = 21 WHERE id = 1;
COMMIT; 
/* in multiversion concurrency control, or lock-based READ COMMITTED */
/* Query 1 */
SELECT * FROM users WHERE id = 1;
COMMIT; 
/* lock-based REPEATABLE READ */
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在上例中，两事务提交成功，意味着修改将变得可见。在会话1中我们可以看出来两次查询结果之间的差异，
在序列化(Serialize)和重复读(Repeatable Read)的事物隔离级别内，DBMS必返回老数据。在读提交(Read Committed)和读未提交(Read Uncommitted)的事物隔离级别下
DBMS必返回已更新的数据，这就是不可以重复读&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;（1）在应用中，如果不同的程序会并发存取多个表，应尽量约定以相同的顺序来访问表，这样可以大大降低产生死锁的机会。
（2）在程序以批量方式处理数据的时候，如果事先对数据排序，保证每个线程按固定的顺序来处理记录，也可以大大降低出现死锁的可能。
（3）在事务中，如果要更新记录，应该直接申请足够级别的锁，即排他锁，而不应先申请共享锁，更新时再申请排他锁，因为当用户申请排他锁时，其他事务可能又已经获得了相同记录的共享锁，从而造成锁冲突，甚至死锁
（4）前面讲过，在REPEATABLE-READ隔离级别下，如果两个线程同时对相同条件记录用SELECT...FOR UPDATE加排他锁，在没有符合该条件记录情况下，两个线程都会加锁成功。程序发现记录尚不存在，就试图插入一条新记录，如果两个线程都这么做，就会出现死锁。这种情况下，将隔离级别改成READ COMMITTED，就可避免问题
（5）当隔离级别为READ COMMITTED时，如果两个线程都先执行SELECT...FOR UPDATE，判断是否存在符合条件的记录，如果没有，就插入记录。此时，只有一个线程能插入成功，另一个线程会出现锁等待，当第1个线程提交后，第2个线程会因主键重出错，但虽然这个线程出错了，却会获得一个排他锁！这时如果有第3个线程又来申请排他锁，也会出现死锁。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;d-&quot;&gt;D. 索引类型及其特点&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;B-tree&lt;/code&gt;: 平衡多叉树，有个纵向索引
很多文件系统都是以此类数据结构来设计存储类型
&lt;code class=&quot;highlighter-rouge&quot;&gt;B+tree&lt;/code&gt;: 平衡多叉树，不仅有纵向索引还有横向索引,Mysql的MyISAM和Innodb的主键索引都是支持B+tree索引的&lt;/p&gt;

&lt;p&gt;其区别是MyIsam索引数据里存储的是数据的地址，所以MysqlISAM的数据文件和索引文件是隔离的
Innodb的主键索引，都是包含了整行数据的完整记录的这种索引叫做聚集索引。因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键（MyISAM可以没有），如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。&lt;/p&gt;

&lt;p&gt;这两者的关系参见&lt;a href=&quot;http://blog.csdn.net/hguisu/article/details/7786014&quot;&gt;http://blog.csdn.net/hguisu/article/details/7786014&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;mysql使用B-tree索引查找条件:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;like的参数是常量并且不以通配符开头&lt;/li&gt;
  &lt;li&gt;=,&amp;gt;,&amp;gt;=,&amp;lt;,&amp;lt;=,between这些操作符都会用到索引,前提是你得使用索引字段查询&lt;/li&gt;
  &lt;li&gt;索引不能跨逻辑操作符共享&lt;/li&gt;
  &lt;li&gt;IS NULL查询不使用索引&lt;/li&gt;
  &lt;li&gt;查询参数数据类型需要跟列定义数据类型一致,让mysql做转化后，不走索引&lt;/li&gt;
  &lt;li&gt;两点确定一条直线，若是单纯使用列查找 即 OR 逻辑操作则不使用索引&lt;/li&gt;
  &lt;li&gt;mysql认为全表扫描要快的话，则不会使用索引&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;参考&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/index-btree-hash.html&quot;&gt;https://dev.mysql.com/doc/refman/5.7/en/index-btree-hash.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt;:哈希索引&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;hash索引通常使用 = 或者 &amp;lt;=&amp;gt; 来比较查找数据，而不使用范围比较来查找数据。因为hash索引只是单纯的键值对存储模式&lt;/li&gt;
  &lt;li&gt;不适合用Order By操作来对数据进行排序&lt;/li&gt;
  &lt;li&gt;不适合用Between查找范围内数据&lt;/li&gt;
  &lt;li&gt;查找应该用完全键名，不支持模糊查询&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;参考&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/index-btree-hash.html&quot;&gt;https://dev.mysql.com/doc/refman/5.7/en/index-btree-hash.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;T-tree&lt;/code&gt;:T树索引&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Inverted&lt;/code&gt;:倒排索引，以文档中的字或词作为关键字索引，表项记录了该字或词在文档中出现的位置信息。&lt;/p&gt;

&lt;p&gt;没有引用到mysql搜索引擎，在Lucence，sphinx全文搜索引擎中使用&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Platoon&lt;/code&gt;:正排索引,以文档的编号作为关键字索引，记录文档中每一个出现的位置信息。查找时需要扫描全表，只到找出所有符合条件的数据&lt;/p&gt;

&lt;h3 id=&quot;soa&quot;&gt;2. SOA&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;SOA&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`Service-Oriented Architecture`&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;面相服务的体系结构&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;DCOM&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`distributed component object model`&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;分布组件对象模型&lt;/span&gt;  
&lt;span class=&quot;no&quot;&gt;CORBA&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`common objects request borker architecture`&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;通用对象请求代理体系&lt;/span&gt;  
&lt;span class=&quot;no&quot;&gt;WSDL&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`web services description language`&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;网络服务描述语言基于&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;XML&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;的描述语言，用于描述与服务交互所需的服务的公共接口，协议绑定，消息格式。&lt;/span&gt;  
&lt;span class=&quot;no&quot;&gt;UDDI&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`Universal Description Discovery and Integration`&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;通用描述，发现整合标准&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;基于&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;XML&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;的注册协议，用于发布&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WSDL&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;并允许第三方发现这些服务。&lt;/span&gt; 
&lt;span class=&quot;no&quot;&gt;SOAP&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;有个时期代表简单对象访问协议，但是自&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SOAP&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;版本后就没有特别的意思了&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;在计算机网络上交换基于&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;XML&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;的消息的协议，通常是用&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 包含认证信息的加密请求头 
2. 包含消息的主体(WSDL标准,主要为xml)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/soap-structure.jpg&quot; alt=&quot;soap&quot; title=&quot;soap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SOAP的工作流程图如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/soap_messages.jpg&quot; alt=&quot;soap-message&quot; title=&quot;soap-message&quot; /&gt;&lt;/p&gt;

&lt;p&gt;REST &lt;code class=&quot;highlighter-rouge&quot;&gt;Representation State Transfer&lt;/code&gt;&lt;br /&gt;
REST吸引更多的开发者，因为它的形式于SOAP相比更加简单更加好用，在交互中更简洁，体积小，其工作流程如下图
&lt;img src=&quot;/images/rest_messages.jpg&quot; alt=&quot;rest-messages&quot; title=&quot;rest-message&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RESTful和REST-style的特点是&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 状态和功能被分割成分布式资源
2. 每个资源都用最小的命令集唯一定位(具有代表性的有GET,PUT,POST,PUT,DELETE)
3. 此协议是C/S架构，无状态，分层的，且支持缓存
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;JSON &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript object notation&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;工作流程如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/json_messages.jpg&quot; alt=&quot;json-messages&quot; title=&quot;json-message&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参考资料&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.service-architecture.com/articles/web-services/web_services_definition.html&quot;&gt;http://www.service-architecture.com/articles/web-services/web_services_definition.html&lt;/a&gt;
&lt;a href=&quot;https://zh.wikipedia.org/wiki/REST&quot;&gt;https://zh.wikipedia.org/wiki/REST&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;sso&quot;&gt;3. SSO&lt;/h3&gt;
&lt;p&gt;Single sign-on 单点登陆
目前web service用的是安全断言标记语言&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Single_sign-on&quot;&gt;https://en.wikipedia.org/wiki/Single_sign-on&lt;/a&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language&quot;&gt;https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 08 Mar 2016 11:13:00 +0800</pubDate>
        <link>http://birdshark.github.io/skill/2016/03/08/my-first-interview.html</link>
        <guid isPermaLink="true">http://birdshark.github.io/skill/2016/03/08/my-first-interview.html</guid>
        
        <category>mysql</category>
        
        
        <category>skill</category>
        
      </item>
    
      <item>
        <title>markdown的基本使用方法</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;此版本的jekyll搭载的markdown解释器是kramdown-1.9，跟其他markdown的解释器可能会有一点差异&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;section&quot;&gt;1. 标题&lt;/h3&gt;

&lt;p&gt;书写方式: &lt;code class=&quot;highlighter-rouge&quot;&gt;##&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;###&lt;/code&gt; + 空格 + 内容&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## 大标题
### 小标题
#### 超小标题
超大标题   //等于号写于文字下方
===
标题      //同超大标题
---
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;section-1&quot;&gt;大标题&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;section-2&quot;&gt;小标题&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;section-3&quot;&gt;超小标题&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;h1 id=&quot;section-4&quot;&gt;超大标题&lt;/h1&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;section-5&quot;&gt;标题&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ps: 标题左侧空格不必须,但是如果是要上传到github作为文章的话,则必须要有.&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;2.行内代码&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;`这个符号在1的左边`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;这个符号在1的左边&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-7&quot;&gt;3. 引用&lt;/h3&gt;
&lt;p&gt;书写方式: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt; &amp;gt;&lt;/code&gt; + 空格 + 内容&lt;/p&gt;

&lt;p&gt;A.单层引用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;第一行&amp;gt;开头+两个空格换行
第二行不必再写&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;第一行&amp;gt;开头+两个空格换行&lt;br /&gt;
第二行不必再写&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;B.叠层引用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; This is the first level of quoting.
&amp;gt;
&amp;gt; &amp;gt; This is nested blockquote.
&amp;gt;
&amp;gt; Back to the first level.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is the first level of quoting.&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;This is nested blockquote.&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;Back to the first level.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-8&quot;&gt;4. 列表&lt;/h3&gt;

&lt;h4 id=&quot;a&quot;&gt;A.无序列表&lt;/h4&gt;

&lt;p&gt;书写方式 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; + 空格 + 内容&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* Red
* Green
* Blue

- Red
- Green
- Blue

+ Red
+ Green
+ Blue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果:(三种方式效果一样)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Red&lt;/li&gt;
  &lt;li&gt;Green&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Blue&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Red&lt;/li&gt;
  &lt;li&gt;Green&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Blue&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Red&lt;/li&gt;
  &lt;li&gt;Green&lt;/li&gt;
  &lt;li&gt;Blue&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;b&quot;&gt;B.有序列表&lt;/h4&gt;

&lt;p&gt;书写方式 &lt;code class=&quot;highlighter-rouge&quot;&gt;数字&lt;/code&gt; + 空格 + 内容&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 这是第一个
1. 这是第二个
1. 这是第三个
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果:(会自动排序)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;这是第一个&lt;/li&gt;
    &lt;li&gt;这是第二个&lt;/li&gt;
    &lt;li&gt;这是第三个&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-9&quot;&gt;5. 分割线&lt;/h3&gt;
&lt;p&gt;书写方式: &lt;code class=&quot;highlighter-rouge&quot;&gt;***&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;---&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;\n +&amp;gt; + \n&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* * *
***
*****
- - -
---

&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果:&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;

&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h3 id=&quot;section-10&quot;&gt;6. 超链接&lt;/h3&gt;
&lt;p&gt;书写方式: &lt;code class=&quot;highlighter-rouge&quot;&gt;[title](href)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[markdown-syntax](http://daringfireball.net/projects/markdown/syntax)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;markdown-syntax&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;以变量的方式定义超链接&lt;/code&gt;&lt;br /&gt;
书写方式&lt;code class=&quot;highlighter-rouge&quot;&gt;[var_name]: url &quot;title&quot;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[id]: http://example.com/  &quot;Optional Title Here&quot;
This is [an example][id] reference-style link.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is &lt;a href=&quot;/images/eg.jpg&quot; title=&quot;aaa&quot;&gt;an example&lt;/a&gt; reference-style link.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-11&quot;&gt;7. 强调(加粗，斜体)&lt;/h3&gt;
&lt;p&gt;书写方式: &lt;code class=&quot;highlighter-rouge&quot;&gt;*内容*&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;**内容**&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;_内容_&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;__内容__&lt;/code&gt;,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*内容*
**内容**
_内容_
__内容__
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;内容&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;内容&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;内容&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;内容&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-12&quot;&gt;8. 图片引用&lt;/h3&gt;
&lt;p&gt;书写方式:&lt;code class=&quot;highlighter-rouge&quot;&gt;![alt](图片路径)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![这是张图片](/images/eg.jpg)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果:
&lt;img src=&quot;/images/eg.jpg&quot; alt=&quot;这是张图片&quot; /&gt;
这个跟超链一样都可以设置定义变量&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[id]: url/to/image  &quot;Optional title attribute&quot;
![hahah][id]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/eg.jpg&quot; alt=&quot;hahah&quot; title=&quot;aaa&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;9. 杂项&lt;/h3&gt;

&lt;h4 id=&quot;a-1&quot;&gt;A.简单超链接&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;http://example.com/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;bemail&quot;&gt;B.简单email地址&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;xiazhichao75@126.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#120;&amp;#105;&amp;#097;&amp;#122;&amp;#104;&amp;#105;&amp;#099;&amp;#104;&amp;#097;&amp;#111;&amp;#055;&amp;#053;&amp;#064;&amp;#049;&amp;#050;&amp;#054;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;&amp;#120;&amp;#105;&amp;#097;&amp;#122;&amp;#104;&amp;#105;&amp;#099;&amp;#104;&amp;#097;&amp;#111;&amp;#055;&amp;#053;&amp;#064;&amp;#049;&amp;#050;&amp;#054;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-14&quot;&gt;10. 代码块&lt;/h3&gt;

&lt;p&gt;书写方式:&lt;code class=&quot;highlighter-rouge&quot;&gt;四个空格&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Tab&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    四个空格
    一个tab
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;效果:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;四个空格
一个tab
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-15&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;markdown的课也补的差不多了，希望对你们有所帮助&lt;/p&gt;

&lt;p&gt;参考链接
&lt;a href=&quot;http://kramdown.gettalong.org/converter/kramdown.html&quot;&gt;http://kramdown.gettalong.org/converter/kramdown.html&lt;/a&gt;
&lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;http://daringfireball.net/projects/markdown/syntax&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 04 Mar 2016 11:13:00 +0800</pubDate>
        <link>http://birdshark.github.io/jekyll/2016/03/04/kramdown.html</link>
        <guid isPermaLink="true">http://birdshark.github.io/jekyll/2016/03/04/kramdown.html</guid>
        
        <category>markdown</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>jekyll基本使用方法</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;本地jekyll环境搭好之后，现在要做的是如何去使用它，这篇文章将讲解如何去使用jekyll和一些模板语言的使用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;jekyll&quot;&gt;jekyll的使用方法&lt;/h2&gt;

&lt;p&gt;首先，你可以右键Git Bash here,前提是你安装了Git。如果没安装也没关系，使用命令提示符也可。创建一个jekyll项目&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new &#39;目录&#39;&lt;/code&gt;这个目录可以是&lt;code class=&quot;highlighter-rouge&quot;&gt;相对路径&lt;/code&gt;也可以是&lt;code class=&quot;highlighter-rouge&quot;&gt;绝对路径&lt;/code&gt;。
如果’目录’里面还有其他的文件时，会提示创建失败，那么再加上–force,即&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll
new &#39;目录&#39; --force&lt;/code&gt;强制创建
&lt;!-- more --&gt;
创建成功后你会发现目录下面有&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yml&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_includes&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;footer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;└──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_layouts&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;└──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_posts&lt;/span&gt;
   &lt;span class=&quot;err&quot;&gt;└──&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;welcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;markdown&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gitignore&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yml&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;about&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;md&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xml&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;└──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;接着我们可以启动服务&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;
你会发现项目根目录下面多了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;目录，这个目录是编译后生成的文件，编译主要有完成的工作有:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;scss -&amp;gt; css&lt;/li&gt;
  &lt;li&gt;*.markdown -&amp;gt; html&lt;/li&gt;
  &lt;li&gt;xml(Liquid标签) -&amp;gt; xml (纯粹)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;启动服务成功后他会提示你&lt;code class=&quot;highlighter-rouge&quot;&gt;Server address: http://127.0.0.1:4000/&lt;/code&gt;。
在浏览器中地址栏中输入localhost:4000即可访问demo的首页&lt;/p&gt;

&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;liquid&quot;&gt;Liquid标签&lt;/h2&gt;

&lt;h3 id=&quot;assign---&quot;&gt;1. assign - 赋值标签&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;{% assign post_title = post.title %}&lt;br /&gt;
{{ post_title }}&lt;br /&gt;
{% assign post_title = ‘birdshark’ | upcase %}&lt;br /&gt;
{{ post_title }}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;capture---&quot;&gt;2. capture - 解析代码块，将结果赋值给一个变量&lt;/h3&gt;

&lt;p&gt;这个标签跟ThinkPhP里边的fetch方法类似，解析标签后获取的模板内容&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;{% assign i = 1 %}&lt;br /&gt;
{% capture attribute_name %}&lt;br /&gt;
{{ post.title | handleize }}-{{ i }}-color&lt;br /&gt;
{% endcapture %}&lt;br /&gt;
{{ attribute_name }}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;case---&quot;&gt;3. case - 开关标签&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;switch case&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;case when&lt;/code&gt;相比,后者不用break断开开关了&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;{% case condition %}&lt;br /&gt;
{% when 1 %}&lt;br /&gt;
hit 1&lt;br /&gt;
{% when 2 or 3 %}&lt;br /&gt;
hit 2 or 3&lt;br /&gt;
{% else %}&lt;br /&gt;
… else …&lt;br /&gt;
{% endcase %}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;{% assign template = ‘yellowblue’%}&lt;br /&gt;
{% case template %}&lt;br /&gt;
{% when ‘red’ %}&lt;br /&gt;
red&lt;br /&gt;
{% when ‘black’ %}&lt;br /&gt;
black&lt;br /&gt;
{% else %}&lt;br /&gt;
yellowblue&lt;br /&gt;
{% endcase %}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;comment---&quot;&gt;4. comment - 注释标签&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;We made 1 million dollars&lt;br /&gt;
{% comment %}&lt;br /&gt;
you can not see me in the html&lt;br /&gt;
{% endcomment %}&lt;br /&gt;
this year&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;cycle---&quot;&gt;5. cycle - 交替循环&lt;/h3&gt;

&lt;p&gt;单组交替循环&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;{%cycle ‘you’,’me’,’him’%}&lt;br /&gt;
{%cycle ‘you’,’me’,’him’%}&lt;br /&gt;
{%cycle ‘you’,’me’,’him’%}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;多组交替循环&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;{% cycle ‘1’ : ‘you’,’me’,’him’%}&lt;br /&gt;
{% cycle ‘1’ : ‘you’,’me’,’him’%}&lt;br /&gt;
{% cycle ‘1’ : ‘you’,’me’,’him’%}&lt;br /&gt;
{% cycle ‘2’ : ‘you’,’me’,’her’%}&lt;br /&gt;
{% cycle ‘2’ : ‘you’,’me’,’her’%}&lt;br /&gt;
{% cycle ‘2’ : ‘you’,’me’,’her’%}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;for---for&quot;&gt;6. for - for循环&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;{% for item in array %}&lt;br /&gt;
{{ item }}&lt;br /&gt;
{%endfor%}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;找了下，Liquid没有提供在此类模板中定义数组的方法，不过还有一个方法可行。那就是在根目录创建_data文件夹，支持&lt;code class=&quot;highlighter-rouge&quot;&gt;.yml&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;.yaml&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;.json&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;csv&lt;/code&gt;4种文件格式。要用的时候呢&lt;code class=&quot;highlighter-rouge&quot;&gt;site.data.&#39;filename&#39;&lt;/code&gt;,如果我在_data目录下面创建了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;letters.csv&lt;/code&gt;,那么&lt;code class=&quot;highlighter-rouge&quot;&gt;site.data.letters&lt;/code&gt;就可获取到数组
csv内容如下:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;i,v&lt;br /&gt;
0,a&lt;br /&gt;
1,b&lt;br /&gt;
2,c&lt;br /&gt;
3,d&lt;br /&gt;
4,e&lt;br /&gt;
5,f&lt;br /&gt;
6,g&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;{%for a in site.data.letters%}&lt;br /&gt;
{{ a.i }}&lt;br /&gt;
{%endfor%}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;break---for&quot;&gt;7. break - 中断for循环&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;{%for a in site.data.letters%}&lt;br /&gt;
{%if a.i == ‘4’ %}&lt;br /&gt;
{%break%}&lt;br /&gt;
{%endif%}&lt;br /&gt;
{{a.i}}&lt;br /&gt;
{%endfor%}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;continue-&quot;&gt;8. continue 中断当前循环跳到下一次循环&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;{%for a in site.data.letters%}&lt;br /&gt;
{%if a.i == ‘4’ %}&lt;br /&gt;
{%continue%}&lt;br /&gt;
{%endif%}&lt;br /&gt;
{{a.i}}&lt;br /&gt;
{%endfor%}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;if---&quot;&gt;9. if - 条件判断&lt;/h3&gt;

&lt;p&gt;操作符可以是 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;contains&lt;/code&gt;,连接操作符 &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;{%if condition%}&lt;br /&gt;
{%elsif condition%}&lt;br /&gt;
…&lt;br /&gt;
{%else%}&lt;br /&gt;
{%endif%}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;include---&quot;&gt;10. include - 引入文件&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;{%include xxx.html%}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;raw---&quot;&gt;11. raw - 暂时禁用标签处理.&lt;/h3&gt;

&lt;p&gt;以下代码需要用&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;endraw&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;包起来才不会被执行，当然为了能看到这端代码 ，我只得用&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;代替&lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt;了&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;{%for a in site.data.letters%}&lt;br /&gt;
{%if a.i == ‘4’ %}&lt;br /&gt;
{%continue%}&lt;br /&gt;
{%endif%}&lt;br /&gt;
{{a.i}}&lt;br /&gt;
{%endfor%}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;unless---if&quot;&gt;12. unless - if的镜像方法&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;{%unless condition%}&lt;br /&gt;
{%else%}&lt;br /&gt;
something&lt;br /&gt;
{%endunless%}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;13. 标准过滤器&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; - 日期函数&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;capitalize&lt;/code&gt; - 首字母大写&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;downcase&lt;/code&gt; - 小写转化&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;upcase&lt;/code&gt; - 大写转化&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt; - 获取数组里的第一个元素&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;last&lt;/code&gt; - 获取数组里的最后一个元素&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt; - 将数组用字符连接成字符串&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sort&lt;/code&gt; - 数组排序 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;reverse&lt;/code&gt; - 倒序&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; - 从数组中获取给定键的值&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt; - 返回字符串长度或者数组长度&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;uniq&lt;/code&gt; - 数组去重&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;escape&lt;/code&gt; - html编码
&lt;code class=&quot;highlighter-rouge&quot;&gt;escape_once&lt;/code&gt; - html编码不影响实体(ps: 跟上面的没啥区别) 
&lt;code class=&quot;highlighter-rouge&quot;&gt;url_encode&lt;/code&gt; - url编码&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;strip&lt;/code&gt; - 去空格&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;lstrip&lt;/code&gt; - 只去头部的空格&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;rstrip&lt;/code&gt; - 只去尾部的空格&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;strip_html&lt;/code&gt; - 剔除html标签&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;strip_newlines&lt;/code&gt; - 剔除文本换行&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;newline_to_br&lt;/code&gt; - 将问本换行转化为html的换行&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;replace&lt;/code&gt; - 替换所有指定字符串&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;replace_first&lt;/code&gt; - 替换第一次出现的指定字符串 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;remove&lt;/code&gt; - 移除所有指定的字符串&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;remove_first&lt;/code&gt; - 移除第一次出现的指定的字符串&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;truncate&lt;/code&gt; - 截取指定长度的字符串，并用指定字符代替他&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;prepend&lt;/code&gt; - 在头部添加字符
&lt;code class=&quot;highlighter-rouge&quot;&gt;pluralize&lt;/code&gt; - (ps:测过，不起作用，可能还需要安装&lt;a href=&quot;https://github.com/bdesham/pluralize&quot;&gt;额外的库&lt;/a&gt;)&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;append&lt;/code&gt; - 拼接字符  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;slice&lt;/code&gt; - 字符串截取  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;split&lt;/code&gt; - 用符号将字符分割  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;minus&lt;/code&gt; - 减法  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;plus&lt;/code&gt; - 加法  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;times&lt;/code&gt; - 乘法  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;divided_by&lt;/code&gt; - 除法  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;modulo&lt;/code&gt; - 模运算  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;round&lt;/code&gt; - 约数运算  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;floor&lt;/code&gt; - 向下取整运算  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ceil&lt;/code&gt; - 向上取整  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; - 默认值&lt;br /&gt;
以上标准过滤器用例皆可&lt;a href=&quot;http://docs.shopify.com/themes/liquid-documentation/filters/additional-filters#date&quot;&gt;在这里&lt;/a&gt;找到。
好了关于Liquid的部分就介绍到这里&lt;/p&gt;

&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;post&quot;&gt;post页面定义&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;1. 头部参数&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;`layout` 文章模板,对应_layouts文件夹下的同名文件  
`title`  文章标题
`date`   文章创建时间。这个随便写，但是要理智  
`categories`  文章分类  
`tags`  文章标签，可以是多个值，中间以空格隔开  
`published`  是否发布 `true` or `false`  
`permalink` 相当于url的rewrite   当然你也可定制一些其他的参数,只要你觉得合适  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;2. 内容赋值&lt;/h3&gt;
&lt;p&gt;了解了那么多，那么当一个post被创建有哪些参数可以供给我们使用呢？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A. site   site一般是定义在_config.yml里面的参数，像`site.title`，`site.username`等，但是还有些比较有用的,像`site.categories`代表所有的分类,`site.tags`代表所有的标签，`site.posts`代表所有的文章  
B. page   page这是页面级别的元素了，头部参数存放在page数组里面
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;3. 摘录配置&lt;/h3&gt;

&lt;p&gt;一般来说，首页不会将文章的全部都放出来，而是取一部分出来，那怎么做到这样的效果呢，jekyll很人性化，不要你去写什么额外的函数只需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;里添加一行&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;ss&quot;&gt;excerpt_separator: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后在post中适当的位置加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;!-- more --&amp;gt;&lt;/code&gt;就可以获取文章的摘要了&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;4. 分页配置&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;中加入一下参数&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;ss&quot;&gt;gems: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paginate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;paginate: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;paginate_path: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/blog/page/:num&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;post中使用&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loops&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;through&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paginated&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% for &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paginator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%}
  &amp;lt;h1&amp;gt;&amp;lt;a href=&quot;{{ post.url }&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;{{ post.title }}&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
  &amp;lt;p class=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;
    &amp;lt;span class=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;{{ post.date }}&amp;lt;/span&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;div class=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;
    {{ post.content }}
  &amp;lt;/div&amp;gt;
{% endfor %}

&amp;lt;!-- Pagination links --&amp;gt;
&amp;lt;div class=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pagination&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;
  {% if paginator.previous_page %}
    &amp;lt;a href=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paginator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;previous_page_path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; class=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;Previous&amp;lt;/a&amp;gt;
  {% else %}
    &amp;lt;span class=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;Previous&amp;lt;/span&amp;gt;
  {% endif %}
  &amp;lt;span class=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_number&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;Page: {{ paginator.page }} of {{ paginator.total_pages }}&amp;lt;/span&amp;gt;
  {% if paginator.next_page %}
    &amp;lt;a href=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paginator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next_page_path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; class=&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;Next&amp;lt;/a&amp;gt;
  {% else %}
    &amp;lt;span class=&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;Next&amp;lt;/span&amp;gt;
  {% endif %}
&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;section-5&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;此篇文章粗略的介绍了一下jekyll和liquid的用法，以及相关的参数，多少都是有些帮助吧，要想了解更多的知识还请移步以下参考链接。&lt;/p&gt;

&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;p&gt;参考链接&lt;br /&gt;
&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;https://jekyllrb.com/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/Shopify/liquid/wiki/Liquid-for-Designers&quot;&gt;https://github.com/Shopify/liquid/wiki/Liquid-for-Designers&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://docs.shopify.com/themes/liquid/filters/additional-filters&quot;&gt;https://docs.shopify.com/themes/liquid/filters/additional-filters&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 02 Mar 2016 01:30:00 +0800</pubDate>
        <link>http://birdshark.github.io/jekyll/2016/03/02/jekyll-basic-used.html</link>
        <guid isPermaLink="true">http://birdshark.github.io/jekyll/2016/03/02/jekyll-basic-used.html</guid>
        
        <category>jekyll</category>
        
        <category>liquid</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>github-pages-静态博客搭建</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;学而有术是谓兴,&lt;br /&gt;
学而无术是无心.&lt;br /&gt;
不学无术要不得,&lt;br /&gt;
不学有术是神棍.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;section&quot;&gt;&lt;strong&gt;序&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;此番乃无聊之作。是以生之有命，而学不止也。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;&lt;strong&gt;章&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;什么是&lt;code class=&quot;highlighter-rouge&quot;&gt;github pages&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;系统环境搭建&lt;/li&gt;
  &lt;li&gt;应用模板&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-2&quot;&gt;&lt;strong&gt;节&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;github-pages&quot;&gt;一、什么是&lt;code class=&quot;highlighter-rouge&quot;&gt;github pages&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;github pages&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;为开发者们和开发者们托管在github上的Project而准备的一个平台,以至于开发者们可以介绍自己和自己的Project。
如果你想要创建个人的&lt;code class=&quot;highlighter-rouge&quot;&gt;github pages&lt;/code&gt;，那么你就得在github上创建一个Project名为
&lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt;,其中&lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;为你登陆github时所用的&lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;
这个&lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;必须要填写正确，否则github会将其判定为Project级别的&lt;code class=&quot;highlighter-rouge&quot;&gt;github pages&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;二、系统环境搭建&lt;/h3&gt;
&lt;p&gt;为了调试更加方便，我们必须得在本地搭建一个运行的环境。方便调试，节省时间。&lt;/p&gt;

&lt;p&gt;某的系统环境 &lt;code class=&quot;highlighter-rouge&quot;&gt;win7 x64&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;github pages&lt;/code&gt;是基于&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;的。那什么是&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;呢?&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby&lt;/code&gt;的一个服务器框架。所以要想玩这个要安装的东西很多。
某来列一列吧&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.ruby-lang.org/en/documentation/installation/&quot;&gt;ruby&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://rubygems.org/pages/download&quot;&gt;gem&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/github/pages-gem&quot;&gt;gh-pages&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;当然，对于很多人来说&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;，是个陌生人。但是纵观现在诸多门编程语言，致用时都可以用MVC来概述。
本人是按照官方网站指导去做的，所遇问题有以下几点&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;无法用gem命令创建Gemfile&lt;/li&gt;
    &lt;li&gt;由于之前安装过好多个版本的jekyll和其他的一些gh-page所依赖的库，导致jekyll build运行报错。&lt;/li&gt;
    &lt;li&gt;jekyll-paginate的使用&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;解法&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;未寻得解法,自己手动建一个Gemfile&lt;/li&gt;
    &lt;li&gt;运行&lt;code class=&quot;highlighter-rouge&quot;&gt;github-pages versions&lt;/code&gt;查看依赖库，运行&lt;code class=&quot;highlighter-rouge&quot;&gt;gem list&lt;/code&gt;查看本地以安装的库 两者对比，以&lt;code class=&quot;highlighter-rouge&quot;&gt;github-pages&lt;/code&gt;为准，运行&lt;code class=&quot;highlighter-rouge&quot;&gt;gem uninstall 库名称&lt;/code&gt;卸载冗余库&lt;/li&gt;
    &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;里添加&lt;code class=&quot;highlighter-rouge&quot;&gt;gems: [jekyll-paginate]&lt;/code&gt;之后 分页功能即可正常使用&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-4&quot;&gt;三、应用模板&lt;/h3&gt;
&lt;p&gt;个人感觉官方提供的&lt;code class=&quot;highlighter-rouge&quot;&gt;themes&lt;/code&gt;,又少又薄弱对于css盲来说联想创作出一套适用的模板，当然jekyll的Blog模板还是很多的。只要你用&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;心&lt;/a&gt;去找。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;&lt;strong&gt;结语&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;以上是本人的一些经验，和着一些通常之经验，得出之成果。&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Feb 2016 23:58:00 +0800</pubDate>
        <link>http://birdshark.github.io/jekyll/2016/02/29/github-pages-static-blog.html</link>
        <guid isPermaLink="true">http://birdshark.github.io/jekyll/2016/02/29/github-pages-static-blog.html</guid>
        
        <category>markdown</category>
        
        <category>github-pages</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.
&lt;!-- more --&gt;
To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 28 Feb 2016 00:30:14 +0800</pubDate>
        <link>http://birdshark.github.io/jekyll/2016/02/28/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://birdshark.github.io/jekyll/2016/02/28/welcome-to-jekyll.html</guid>
        
        <category>jekyll</category>
        
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
